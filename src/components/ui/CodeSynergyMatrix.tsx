'use client'

import { motion, useInView, AnimatePresence } from 'framer-motion'
import { useRef, useState, useEffect } from 'react'
import AnimatedCounter from './AnimatedCounter'

// Code generation examples avec prompts
const codeExamples = [
  {
    id: 'auth',
    prompt: 'Create secure JWT authentication middleware for Next.js',
    human: 'Need authentication system with refresh tokens',
    claude: 'Generating secure auth middleware...',
    code: `// Secure JWT Middleware - Generated by Claude IA
import jwt from 'jsonwebtoken'
import { NextRequest, NextResponse } from 'next/server'

export async function authMiddleware(req: NextRequest) {
  const token = req.headers.get('authorization')?.split(' ')[1]
  
  if (!token) {
    return NextResponse.json({ error: 'No token' }, { status: 401 })
  }
  
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET!)
    return NextResponse.next()
  } catch {
    return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
  }
}`,
    metrics: { time: '2.3s', bugs: 0, tests: 'Generated', performance: 'A+' }
  },
  {
    id: 'api',
    prompt: 'Build optimized REST API with caching and validation',
    human: 'Need fast API with data validation',
    claude: 'Creating optimized API structure...',
    code: `// Optimized API Route - Claude IA Enhanced
import { z } from 'zod'
import { NextRequest } from 'next/server'
import { redis } from '@/lib/redis'

const schema = z.object({
  name: z.string().min(1),
  email: z.string().email()
})

export async function POST(req: NextRequest) {
  // Validation automatique
  const body = await req.json()
  const result = schema.safeParse(body)
  
  if (!result.success) {
    return Response.json({ error: result.error }, { status: 400 })
  }
  
  // Cache intelligent
  const cacheKey = \`user:\${result.data.email}\`
  const cached = await redis.get(cacheKey)
  
  if (cached) {
    return Response.json(cached)
  }
  
  // Processing...
  const user = await createUser(result.data)
  await redis.setex(cacheKey, 3600, JSON.stringify(user))
  
  return Response.json(user)
}`,
    metrics: { time: '1.8s', bugs: 0, tests: 'Auto', performance: 'A++' }
  },
  {
    id: 'ui',
    prompt: 'Design responsive dashboard with real-time updates',
    human: 'Dashboard with live data updates needed',
    claude: 'Building real-time dashboard components...',
    code: `// Real-time Dashboard - IA Architecture
'use client'
import { motion } from 'framer-motion'
import { useEffect, useState } from 'react'
import { useWebSocket } from '@/hooks/useWebSocket'

export default function Dashboard() {
  const { data, isConnected } = useWebSocket('/api/live-data')
  const [metrics, setMetrics] = useState(null)
  
  useEffect(() => {
    if (data) {
      setMetrics(data)
    }
  }, [data])
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <motion.div
        className="bg-gradient-to-br from-blue-500/10 to-purple-500/10 p-6 rounded-2xl"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-semibold">Performance</h3>
          <div className={\`w-2 h-2 rounded-full \${isConnected ? 'bg-green-500' : 'bg-red-500'}\`} />
        </div>
        
        <div className="text-3xl font-bold text-blue-500">
          {metrics?.performance || 0}%
        </div>
        
        <div className="text-sm text-gray-500 mt-2">
          Real-time monitoring
        </div>
      </motion.div>
      
      {/* Auto-generated responsive grid... */}
    </div>
  )
}`,
    metrics: { time: '3.1s', bugs: 0, tests: 'Cypress', performance: 'Mobile-first' }
  }
]

// Synergy metrics
const synergyMetrics = [
  { label: 'Code Speed', human: 100, withAI: 340, unit: '%' },
  { label: 'Bug Reduction', human: 0, withAI: 89, unit: '%' },
  { label: 'Code Quality', human: 67, withAI: 95, unit: '%' },
  { label: 'Test Coverage', human: 45, withAI: 92, unit: '%' }
]

interface CodeSynergyMatrixProps {
  title: string
  subtitle: string
  description: string
  metrics: Array<{
    value: string
    label: string
    description: string
    animatedValue?: number
    suffix?: string
  }>
  ctaText: string
  color: string
}

export default function CodeSynergyMatrix({
  title,
  subtitle,
  description,
  metrics,
  ctaText,
  color
}: CodeSynergyMatrixProps) {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true })
  const [activeExample, setActiveExample] = useState(0)
  const [isGenerating, setIsGenerating] = useState(false)
  const [generationStep, setGenerationStep] = useState<'prompt' | 'thinking' | 'coding' | 'complete'>('prompt')

  // Auto cycle through examples
  useEffect(() => {
    if (!isInView) return
    
    const interval = setInterval(() => {
      setActiveExample(prev => (prev + 1) % codeExamples.length)
      startGeneration()
    }, 8000)
    
    return () => clearInterval(interval)
  }, [isInView])

  const startGeneration = () => {
    setIsGenerating(true)
    setGenerationStep('prompt')
    
    setTimeout(() => setGenerationStep('thinking'), 500)
    setTimeout(() => setGenerationStep('coding'), 1500)
    setTimeout(() => {
      setGenerationStep('complete')
      setIsGenerating(false)
    }, 4000)
  }

  const currentExample = codeExamples[activeExample]

  return (
    <section ref={ref} className="py-20 lg:py-32 relative overflow-hidden bg-gradient-to-br from-purple-950/20 via-black to-blue-950/20">
      {/* Background Matrix */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute inset-0" style={{
          backgroundImage: `
            linear-gradient(90deg, #8B5CF6 1px, transparent 1px),
            linear-gradient(180deg, #8B5CF6 1px, transparent 1px)
          `,
          backgroundSize: '25px 25px'
        }} />
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
          
          {/* Left Side - Title & Metrics */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8 }}
          >
            <motion.div 
              className="inline-flex items-center px-4 py-2 rounded-full border border-purple-400/40 bg-purple-400/10 mb-8"
            >
              <motion.div 
                className="w-2 h-2 rounded-full bg-purple-400 mr-3"
                animate={{ scale: [1, 1.5, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              />
              <span className="text-sm font-medium text-purple-400">
                SYNERGIE TEMPS RÉEL • DÉVELOPPEUR ↔ CLAUDE IA
              </span>
            </motion.div>

            <h1 className="text-5xl lg:text-7xl font-bold text-white mb-8 leading-tight">
              {title.split(' ').map((word, index) => {
                const isHighlight = word.toLowerCase().includes('code') || 
                                  word.toLowerCase().includes('synergie') ||
                                  word.toLowerCase().includes('matrix')
                return (
                  <motion.span
                    key={index}
                    className={isHighlight ? 'bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent' : ''}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.6, delay: index * 0.1 }}
                  >
                    {word}{' '}
                  </motion.span>
                )
              })}
            </h1>

            <p className="text-xl text-gray-300 mb-12 leading-relaxed">
              {description}
            </p>

            {/* Synergy Comparison */}
            <div className="space-y-6 mb-12">
              <h3 className="text-2xl font-bold text-white mb-6">Performance matrix</h3>
              
              {synergyMetrics.map((metric, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={isInView ? { opacity: 1, x: 0 } : {}}
                  transition={{ duration: 0.8, delay: index * 0.2 }}
                  className="bg-gradient-to-r from-purple-500/10 to-blue-500/10 rounded-2xl p-6 border border-purple-400/20"
                >
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="text-white font-semibold">{metric.label}</h4>
                    <div className="text-purple-400 font-bold">
                      +{metric.withAI - metric.human}{metric.unit}
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-center">
                      <div className="text-gray-400 text-sm mb-2">Développeur Seul</div>
                      <div className="text-2xl font-bold text-red-400">
                        {metric.human}{metric.unit}
                      </div>
                    </div>
                    <div className="text-center">
                      <div className="text-purple-300 text-sm mb-2">Avec Claude IA</div>
                      <div className="text-2xl font-bold text-green-400">
                        <AnimatedCounter
                          from={metric.human}
                          to={metric.withAI}
                          duration={2}
                          delay={1 + index * 0.3}
                          suffix={metric.unit}
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Progress visualization */}
                  <div className="mt-4 bg-gray-700 rounded-full h-2 overflow-hidden">
                    <motion.div
                      className="h-full bg-gradient-to-r from-purple-500 to-blue-500"
                      initial={{ width: `${(metric.human / metric.withAI) * 100}%` }}
                      animate={{ width: '100%' }}
                      transition={{ duration: 2, delay: 1 + index * 0.3 }}
                    />
                  </div>
                </motion.div>
              ))}
            </div>

            {/* CTA */}
            <motion.button
              className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-12 py-6 rounded-2xl font-bold text-lg shadow-2xl"
              whileHover={{ scale: 1.05, boxShadow: "0 20px 40px rgba(139,92,246,0.3)" }}
              whileTap={{ scale: 0.95 }}
              animate={{ y: [0, -5, 0] }}
              transition={{ duration: 3, repeat: Infinity }}
            >
              {ctaText} →
            </motion.button>
          </motion.div>

          {/* Right Side - Code Generation Matrix */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.3 }}
            className="relative"
          >
            {/* Main Code Interface */}
            <div className="bg-gradient-to-br from-gray-900/90 to-black/80 backdrop-blur-xl rounded-3xl border border-purple-400/30 overflow-hidden">
              
              {/* Interface Header */}
              <div className="bg-gradient-to-r from-purple-500/10 to-blue-500/10 p-6 border-b border-purple-400/20">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <motion.div
                      className="w-4 h-4 rounded-full bg-purple-400"
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 2, repeat: Infinity }}
                    />
                    <h3 className="text-white font-bold text-lg">CODE SYNERGY MATRIX</h3>
                  </div>
                  <div className="flex items-center space-x-2 text-xs">
                    <span className="text-green-400">◆ DÉVELOPPEUR</span>
                    <span className="text-purple-400">◆ CLAUDE IA</span>
                  </div>
                </div>
              </div>

              <div className="p-8 space-y-6">
                {/* Prompt Input */}
                <div className="bg-green-500/10 rounded-2xl p-4 border border-green-400/30">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="w-2 h-2 rounded-full bg-green-400"></div>
                    <span className="text-green-400 text-sm font-bold">DÉVELOPPEUR INPUT</span>
                  </div>
                  <div className="text-white font-mono text-sm">
                    {currentExample.human}
                  </div>
                </div>

                {/* Claude Processing */}
                <div className="bg-purple-500/10 rounded-2xl p-4 border border-purple-400/30">
                  <div className="flex items-center space-x-2 mb-3">
                    <motion.div
                      className="w-2 h-2 rounded-full bg-purple-400"
                      animate={isGenerating ? { scale: [1, 1.5, 1] } : {}}
                      transition={{ duration: 0.5, repeat: Infinity }}
                    />
                    <span className="text-purple-400 text-sm font-bold">CLAUDE IA PROCESSING</span>
                  </div>
                  <div className="text-purple-200 font-mono text-sm">
                    <AnimatePresence mode="wait">
                      <motion.div
                        key={generationStep}
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        exit={{ opacity: 0 }}
                      >
                        {generationStep === 'prompt' && 'Analysing requirements...'}
                        {generationStep === 'thinking' && 'Architecture planning...'}
                        {generationStep === 'coding' && 'Generating optimized code...'}
                        {generationStep === 'complete' && currentExample.claude}
                      </motion.div>
                    </AnimatePresence>
                  </div>
                </div>

                {/* Generated Code */}
                <div className="bg-blue-500/10 rounded-2xl border border-blue-400/30 overflow-hidden">
                  <div className="bg-blue-500/20 p-3 border-b border-blue-400/30">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 rounded-full bg-blue-400"></div>
                        <span className="text-blue-400 text-sm font-bold">GENERATED CODE</span>
                      </div>
                      <div className="flex items-center space-x-4 text-xs">
                        <span className="text-green-400">▲ {currentExample.metrics.time}</span>
                        <span className="text-yellow-400">◆ {currentExample.metrics.bugs} bugs</span>
                        <span className="text-purple-400">● {currentExample.metrics.performance}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-4 font-mono text-xs leading-relaxed max-h-64 overflow-y-auto">
                    <motion.pre
                      className="text-blue-200 whitespace-pre-wrap"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 1, delay: 0.5 }}
                    >
                      {currentExample.code}
                    </motion.pre>
                  </div>
                </div>

                {/* Example Selector */}
                <div className="flex justify-center space-x-2">
                  {codeExamples.map((_, index) => (
                    <button
                      key={index}
                      onClick={() => setActiveExample(index)}
                      className={`w-3 h-3 rounded-full transition-all duration-300 ${
                        activeExample === index ? 'bg-purple-400 scale-125' : 'bg-gray-600'
                      }`}
                    />
                  ))}
                </div>
              </div>
            </div>

            {/* Floating Performance Badge */}
            <motion.div
              className="absolute -top-6 -right-6 bg-gradient-to-r from-green-500 to-emerald-400 rounded-full px-6 py-3 text-sm font-bold text-white shadow-xl"
              animate={{
                rotate: [0, 2, -2, 0],
                scale: [1, 1.05, 1]
              }}
              transition={{ duration: 4, repeat: Infinity }}
            >
              ▲ 340% FASTER
            </motion.div>
          </motion.div>
        </div>
      </div>
    </section>
  )
}